/*------------------------------------*\
	$HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn't already have a class to which you could apply this
 * styling, e.g. if you need to float '.main-nav' left then add 'float:left;' to
 * that ruleset as opposed to adding the '.float--left' class to the markup.
 *
 * A lot of these classes carry '!important' as you will always want them to win
 * out over other selectors.
 */


/// make it a block
.block,
%block {
	display: block !important;
}

/// include padding
.bb {
	box-sizing: border-box !important;
}

///Add/remove floats
.float					{ float: left !important; }
.float--right		{ float: right !important; }
.float--none		{ float: none !important; }

/**
 * color your life.
 */
.color--highlight { color: $color-highlight !important; }


/// Text alignment
.text--left     { text-align: left !important; }
.text--center   { text-align: center !important; }
.text--right    { text-align: right !important; }

/// Apply capital case to an element (usually a 'strong').
.caps,
%caps {
	text-transform: uppercase !important;
}

.lowercase{
	text-transform: lowercase !important;
}

/// performance hack
/// see: http://aerotwist.com/blog/on-translate3d-and-layer-creation-hacks/
.will-animate,
%will-animate {
	transform: translate3d(0, 0, 0);
}

.hide{
	display: none !important;
}

.center {
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%,-50%);
}

.v-center {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

.h-center {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}


.relative { position: relative; }

.vh {
	min-height: 100vh;
}

.fullscreen {
	width: 100%;
	height: 100vh;
}

.oh {
	overflow: hidden;
}
